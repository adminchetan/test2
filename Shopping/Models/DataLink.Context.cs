//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shopping.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EcommerceEntities : DbContext
    {
        public EcommerceEntities()
            : base("name=EcommerceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CollectionMaster> CollectionMasters { get; set; }
        public virtual DbSet<DistrictMaster> DistrictMasters { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<SellerMaster> SellerMasters { get; set; }
    
        public virtual ObjectResult<string> sp_AddCategory(string name, Nullable<int> admin, Nullable<int> isServiceActive, ObjectParameter result)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var adminParameter = admin.HasValue ?
                new ObjectParameter("Admin", admin) :
                new ObjectParameter("Admin", typeof(int));
    
            var isServiceActiveParameter = isServiceActive.HasValue ?
                new ObjectParameter("IsServiceActive", isServiceActive) :
                new ObjectParameter("IsServiceActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_AddCategory", nameParameter, adminParameter, isServiceActiveParameter, result);
        }
    
        public virtual ObjectResult<CollectionMaster> sp_GetCollectionForAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_GetCollectionForAdmin");
        }
    
        public virtual ObjectResult<CollectionMaster> sp_GetCollectionForAdmin(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_GetCollectionForAdmin", mergeOption);
        }
    
        public virtual ObjectResult<CollectionMaster> sp_GetAllResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_GetAllResult");
        }
    
        public virtual ObjectResult<CollectionMaster> sp_GetAllResult(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_GetAllResult", mergeOption);
        }
    
        public virtual int sp_insertCollectionByAdmin(string name, Nullable<int> categoryId, Nullable<int> districtId, Nullable<int> stateid, Nullable<bool> isActive, string lat, string lng, string collectionCode, string description, Nullable<bool> isUserAvailable, Nullable<int> priceRange, string priceUnit, string mobileNumber, string email, string image)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var stateidParameter = stateid.HasValue ?
                new ObjectParameter("Stateid", stateid) :
                new ObjectParameter("Stateid", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var lngParameter = lng != null ?
                new ObjectParameter("Lng", lng) :
                new ObjectParameter("Lng", typeof(string));
    
            var collectionCodeParameter = collectionCode != null ?
                new ObjectParameter("CollectionCode", collectionCode) :
                new ObjectParameter("CollectionCode", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isUserAvailableParameter = isUserAvailable.HasValue ?
                new ObjectParameter("IsUserAvailable", isUserAvailable) :
                new ObjectParameter("IsUserAvailable", typeof(bool));
    
            var priceRangeParameter = priceRange.HasValue ?
                new ObjectParameter("PriceRange", priceRange) :
                new ObjectParameter("PriceRange", typeof(int));
    
            var priceUnitParameter = priceUnit != null ?
                new ObjectParameter("PriceUnit", priceUnit) :
                new ObjectParameter("PriceUnit", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertCollectionByAdmin", nameParameter, categoryIdParameter, districtIdParameter, stateidParameter, isActiveParameter, latParameter, lngParameter, collectionCodeParameter, descriptionParameter, isUserAvailableParameter, priceRangeParameter, priceUnitParameter, mobileNumberParameter, emailParameter, imageParameter);
        }
    
        public virtual ObjectResult<CollectionMaster> sp_Lastfive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_Lastfive");
        }
    
        public virtual ObjectResult<CollectionMaster> sp_Lastfive(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CollectionMaster>("sp_Lastfive", mergeOption);
        }
    }
}
